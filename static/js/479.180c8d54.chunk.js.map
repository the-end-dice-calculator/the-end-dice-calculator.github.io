{"version":3,"file":"static/js/479.180c8d54.chunk.js","mappings":"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","sources":["StatsBlock/math/utils.js","StatsBlock/math/attacker_odds.js","StatsBlock/math/defender_odds.js","StatsBlock/math/calculate_odds.js","StatsBlock/calculate_odds_worker.js"],"sourcesContent":["const clone = (obj, overrides={}) => ({\n\t...obj,\n\t...overrides\n});\n\nfunction* generate_all_rolls(n) {\n\tconst baseline = [[1],[2],[3],[4],[5],[6]];\n\tif (n <= 0) {\n\t\treturn [];\n\t} else if (n === 1) {\n\t\tyield* baseline;\n\t} else {\n\t\tfor (let roll of generate_all_rolls(n - 1)) {\n\t\t\tyield* baseline.map(new_roll => new_roll.concat(roll))\n\t\t}\n\t}\n}\n\n\nconst powers_of_six =\n\t[6**0, 6**1, 6**2, 6**3, 6**4, 6**5, 6**6, 6**7, 6**8, 6**9, 6**10];\nconst vector_sanity_check = (denom, v) => {\n\tconst is_close = (x,y) => Math.abs(x - y) < 0.1;\n\tfor (let power of powers_of_six) {\n\t\tif (is_close(denom, power)) {\n\t\t\treturn;\n\t\t}\n\t}\n\tconsole.error(`Sanity check failed, normalize denom is ${denom}. Expected a power of six between 1 and 6^10.`);\n\tconsole.error(v);\n}\n\nconst normalize_vector = (v) => {\n\tconst denom = Object.values(v).reduce((x,y) => x + y, 0);\n\tvector_sanity_check(denom, v);\n\tconst normalized = Object.fromEntries(\n\t\tObject.entries(v).map(([key, value]) => [key, value / denom])\n\t);\n\treturn normalized;\n}\n\nexport {clone, generate_all_rolls, normalize_vector}\n","import {clone, generate_all_rolls, normalize_vector} from './utils';\n\n// TODO: maybe move these into an array utils file?\n// probably going to use them again\nconst count = (arr, el) => arr.map((x) => x === el).filter(Boolean).length;\nconst indicesOf = (arr, el) =>\n\tarr.map((x, i) => x === el ? i : null).filter((i) => i != null);\n\nconst get_attack_dice = (circumstances) => \n\t1 + circumstances.injuries +\n\t\t(circumstances.long_shot ? 1 : 0) +\n\t\t(circumstances.moving? 1 : 0) +\n\t\t(circumstances.cover ? 1 : 0) +\n\t\t(circumstances.target_running? 1 : 0);\n\nfunction* get_reroll_possibilities (roll, reroll_indices) {\n\tconst rerolls = generate_all_rolls(reroll_indices.length);\n\tfor (let reroll of rerolls) {\n\t\tyield roll.map((x,i) =>\n\t\t\treroll_indices.includes(i) ? reroll[reroll_indices.indexOf(i)] : x)\n\t}\n}\n\nconst get_brutal_reroll_index = (roll, rerolls_used) => {\n\tconst one_indices = indicesOf(roll, 1);\n\tconst two_indices = indicesOf(roll, 2);\n\tfor (let index of one_indices.concat(two_indices)) {\n\t\tif (!rerolls_used.includes(index)) {\n\t\t\treturn index;\n\t\t}\n\t}\n\treturn -1;\n}\n\nconst get_attack_outcome = (roll, is_brutal) => {\n\tif (Math.min(...roll) < 3) {\n\t\treturn \"MISS\";\n\t} else if (Math.min(...roll) < 6) {\n\t\treturn is_brutal ? \"BRUTAL_HIT\" : \"HIT\";\n\t} else {\n\t\treturn is_brutal ? \"BRUTAL_CRIT\" : \"CRIT\";\n\t}\n}\n\nconst generate_attacker_odds = (circumstances) => {\n\tconst outcomes = {\n\t\tBRUTAL_CRIT: 0,\n\t\tCRIT: 0,\n\t\tBRUTAL_HIT: 0,\n\t\tHIT: 0,\n\t\tMISS: 0\n\t}\n\n\tconst evaluate_roll = (circumstances, roll, rerolls_used=[], weight=1) => {\n\t\tif (circumstances.rapid_fire) {\n\t\t\tconst reroll_indices =\n\t\t\t\tindicesOf(roll, 1).filter((i) => !rerolls_used.includes(i));\n\t\t\tif (reroll_indices.length) {\n\t\t\t\tconst weight_factor = 1 / (6 ** reroll_indices.length);\n\t\t\t\tfor (let reroll of get_reroll_possibilities(roll, reroll_indices)) {\n\t\t\t\t\tevaluate_roll(\n\t\t\t\t\t\tclone(circumstances, {rapid_fire: false}),\n\t\t\t\t\t\treroll,\n\t\t\t\t\t\trerolls_used.concat(reroll_indices),\n\t\t\t\t\t\tweight * weight_factor\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (circumstances.precise && count(roll, 2) === 1 && count(roll, 1) === 0) {\n\t\t\tcircumstances = clone(circumstances, {precise: false});\n\t\t\troll[roll.indexOf(2)] += 1;\n\t\t}\n\t\tif (circumstances.brutal && (roll.includes(1) || roll.includes(2))) {\n\t\t\tconst reroll_index = get_brutal_reroll_index(roll, rerolls_used);\n\t\t\tif (reroll_index >= 0) {\n\t\t\t\t[1,2,3,4,5,6].forEach((n) => {\n\t\t\t\t\tconst reroll = roll.map((x,i) => i === reroll_index? n : x);\n\t\t\t\t\tevaluate_roll(\n\t\t\t\t\t\tclone(circumstances, {brutal: false}),\n\t\t\t\t\t\treroll,\n\t\t\t\t\t\trerolls_used.concat(reroll_index),\n\t\t\t\t\t\tweight /6\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (circumstances.precise) {\n\t\t\tcircumstances = clone(circumstances, {precise: false});\n\t\t\troll[roll.indexOf(Math.min(...roll))] += 1;\n\t\t}\n\t\tconst outcome = get_attack_outcome(roll,\n\t\t\tcircumstances.brutal && rerolls_used.length === 0);\n\t\toutcomes[outcome] += weight;\n\t}\n\n\tfor (let roll of generate_all_rolls(get_attack_dice(circumstances))) {\n\t\tevaluate_roll(circumstances, roll);\n\t}\n\treturn normalize_vector(outcomes);\n}\n\nexport {generate_attacker_odds};\n","import {generate_all_rolls, normalize_vector} from './utils';\n\nconst generate_defender_odds = (circumstances) => {\n\tconst results = {\n\t\tCOVER: 0,\n\t\tARMOR: 0,\n\t\tHIT: 0\n\t};\n\t// We never need more than 3 dice\n\tconst defense_rolls = generate_all_rolls(3);\n\t// TODO: cover value should be able to vary (e.g. Northstar Militia)\n\t//       but I don't want to deal with it yet\n\tconst cover_value = 5;\n\tfor (let roll of defense_rolls) {\n\t\tlet die_index = 0;\n\t\tlet scoped_reroll_available = circumstances.scoped;\n\t\tif (circumstances.cover) {\n\t\t\tif (roll[die_index++] >= cover_value) {\n\t\t\t\t// cover save success\n\t\t\t\tif (scoped_reroll_available) {\n\t\t\t\t\tscoped_reroll_available = false;\n\t\t\t\t\tif (roll[die_index++] >= cover_value) {\n\t\t\t\t\t\t// cover reroll success\n\t\t\t\t\t\tresults[\"COVER\"] += 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresults[\"COVER\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (circumstances.armor && circumstances.armor < 7) {\n\t\t\tconst armor_value = circumstances.armor +\n\t\t\t\t(circumstances.armor_penetration ? 1 : 0);\n\t\t\tif (roll[die_index++] >= armor_value) {\n\t\t\t\t// armor save success\n\t\t\t\tif (scoped_reroll_available) {\n\t\t\t\t\tscoped_reroll_available = false;\n\t\t\t\t\tif (roll[die_index++] >= armor_value) {\n\t\t\t\t\t\t// armor reroll success\n\t\t\t\t\t\tresults[\"ARMOR\"] += 1;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresults[\"ARMOR\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//hit made it through the gauntlet of saves\n\t\tresults[\"HIT\"] += 1;\n\t}\n\treturn normalize_vector(results);\n}\n\nconst generate_defender_brutal_odds = (circumstances) => {\n\tconst results = {\n\t\t\"COVER\": 0, // 2 cover\n\t\t\"ARMOR\": 0, // 1 cover, 1 armor\n\t\t\"DOUBLE_ARMOR\": 0, // 2 armor\n\t\t\"HIT\": 0, // 1 cover, 1 hit\n\t\t\"ARMOR_AND_HIT\": 0, // 1 armor, 1 hit\n\t\t\"DOUBLE_HIT\": 0 // 2 hit\n\t};\n\n\t// We never need more than 5 dice\n\tconst defense_rolls = generate_all_rolls(5);\n\t// TODO: cover value should be able to vary (e.g. Northstar Militia)\n\t//       but I don't want to deal with it yet\n\tconst cover_value = 5;\n\n\tlet die_index_1;\n\tlet die_index_2;\n\tconst next_index = () => Math.max(die_index_1, die_index_2) + 1;\n\n\tfor (let roll of defense_rolls) {\n\t\tdie_index_1 = 0;\n\t\tdie_index_2 = 1;\n\t\tlet saved_one_from_cover = false;\n\t\tlet scoped_reroll_available = circumstances.scoped;\n\t\tif (circumstances.cover) {\n\t\t\tconst cover_dice = [roll[die_index_1], roll[die_index_2]];\n\t\t\tdie_index_1 = next_index();\n\t\t\tdie_index_2 = next_index();\n\t\t\tif (scoped_reroll_available) {\n\t\t\t\t// force reroll if any were successful\n\t\t\t\tconst scoped_reroll_index =\n\t\t\t\t\tcover_dice.findIndex((die) => die >= cover_value);\n\t\t\t\tif (scoped_reroll_index >= 0) {\n\t\t\t\t\tcover_dice[scoped_reroll_index] = roll[die_index_1]\n\t\t\t\t\tdie_index_1 = next_index();\n\t\t\t\t\tscoped_reroll_available = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (cover_dice.every((die) => die >= cover_value)) {\n\t\t\t\tresults[\"COVER\"] += 1;\n\t\t\t\tcontinue;\n\t\t\t} else if (cover_dice.some((die) => die >= cover_value)) {\n\t\t\t\tsaved_one_from_cover = true;\n\t\t\t}\n\t\t}\n\t\tif (circumstances.armor && circumstances.armor < 7) {\n\t\t\tconst armor_value = circumstances.armor +\n\t\t\t\t(circumstances.armor_penetration ? 1 : 0);\n\t\t\tif (saved_one_from_cover) {\n\t\t\t\t// only one hit needs to be saved\n\t\t\t\tlet armor_roll = roll[die_index_1];\n\t\t\t\tdie_index_1 = next_index();\n\t\t\t\tif (scoped_reroll_available && armor_roll >= armor_value) {\n\t\t\t\t\tarmor_roll = roll[die_index_1];\n\t\t\t\t\tdie_index_1 = next_index();\n\t\t\t\t}\n\t\t\t\tif (armor_roll >= armor_value) {\n\t\t\t\t\tresults[\"ARMOR\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tresults[\"HIT\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst armor_dice = [roll[die_index_1], roll[die_index_2]];\n\t\t\t\tdie_index_1 = next_index();\n\t\t\t\tdie_index_2 = next_index();\n\t\t\t\tif (scoped_reroll_available) {\n\t\t\t\t\tconst scoped_reroll_index =\n\t\t\t\t\t\tarmor_dice.findIndex((die) => die >= armor_value);\n\t\t\t\t\tif (scoped_reroll_index >= 0) {\n\t\t\t\t\t\tarmor_dice[scoped_reroll_index] = roll[die_index_1]\n\t\t\t\t\t\tdie_index_1 = next_index();\n\t\t\t\t\t\tscoped_reroll_available = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (armor_dice.every((die) => die >= armor_value)) {\n\t\t\t\t\tresults[\"DOUBLE_ARMOR\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (armor_dice.some((die) => die >= armor_value)) {\n\t\t\t\t\tresults[\"ARMOR_AND_HIT\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tresults[\"DOUBLE_HIT\"] += 1;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// no armor save\n\t\t\tif (saved_one_from_cover) {\n\t\t\t\tresults[\"HIT\"] += 1;\n\t\t\t} else {\n\t\t\t\tresults[\"DOUBLE_HIT\"] += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn normalize_vector(results);\n}\n\nexport {generate_defender_odds, generate_defender_brutal_odds};\n","import {generate_attacker_odds} from './attacker_odds';\nimport {clone} from './utils';\nimport {\n\tgenerate_defender_odds,\n\tgenerate_defender_brutal_odds\n} from './defender_odds';\n\nconst combine_odds = (attack, defense, crit_defense) => {\n\treturn {\n\t\tKILL: attack[\"CRIT\"] * crit_defense[\"HIT\"],\n\t\tHIT: attack[\"HIT\"] * defense[\"HIT\"],\n\t\tARMOR_BREAK:\n\t\t\tattack[\"HIT\"] * defense[\"ARMOR\"] +\n\t\t\tattack[\"CRIT\"] * crit_defense[\"ARMOR\"],\n\t\tMISS: attack[\"MISS\"] + attack[\"HIT\"] * defense[\"COVER\"]\n\t}\n}\n\nconst combine_brutal_odds = (\n\tattack,\n\tdefense,\n\tcrit_defense,\n\tbrutal_defense,\n\tcrit_brutal_defense\n) => {\n\treturn {\n\t\tKILL:\n\t\t\tattack[\"BRUTAL_CRIT\"] * crit_brutal_defense[\"DOUBLE_HIT\"] +\n\t\t\tattack[\"BRUTAL_CRIT\"] * crit_brutal_defense[\"ARMOR_AND_HIT\"] +\n\t\t\tattack[\"CRIT\"] * crit_defense[\"HIT\"],\n\t\tBRUTAL_HIT: attack[\"BRUTAL_HIT\"] * brutal_defense[\"DOUBLE_HIT\"],\n\t\tHIT:\n\t\t\tattack[\"HIT\"] * defense[\"HIT\"] +\n\t\t\tattack[\"BRUTAL_HIT\"] * brutal_defense[\"HIT\"],\n\t\tHIT_AND_ARMOR_BREAK: attack[\"BRUTAL_HIT\"] * brutal_defense[\"ARMOR_AND_HIT\"],\n\t\tARMOR_BREAK:\n\t\t\tattack[\"HIT\"] * defense[\"ARMOR\"] +\n\t\t\tattack[\"CRIT\"] * crit_defense[\"ARMOR\"] +\n\t\t\tattack[\"BRUTAL_HIT\"] * brutal_defense[\"ARMOR\"],\n\t\tDOUBLE_ARMOR_BREAK:\n\t\t\tattack[\"BRUTAL_HIT\"] * brutal_defense[\"DOUBLE_ARMOR\"] +\n\t\t\tattack[\"BRUTAL_CRIT\"] * crit_brutal_defense[\"DOUBLE_ARMOR\"],\n\t\tMISS:\n\t\t\tattack[\"MISS\"] +\n\t\t\tattack[\"HIT\"] * defense[\"COVER\"] +\n\t\t\tattack[\"BRUTAL_HIT\"] * brutal_defense[\"COVER\"]\n\t};\n\n}\n\nconst calculate_brutal_odds = (circumstances) => {\n\tconst attacker_odds = generate_attacker_odds(circumstances);\n\tconst defender_odds = generate_defender_odds(circumstances);\n\tconst defender_crit_odds = circumstances.cover ?\n\t\tgenerate_defender_odds(clone(circumstances, {cover: false})) :\n\t\tdefender_odds;\n\tconst defender_brutal_odds = generate_defender_brutal_odds(circumstances);\n\tconst defender_brutal_crit_odds = circumstances.cover ?\n\t\tgenerate_defender_brutal_odds(clone(circumstances, {cover: false})) :\n\t\tdefender_brutal_odds;\n\treturn combine_brutal_odds(\n\t\tattacker_odds,\n\t\tdefender_odds,\n\t\tdefender_crit_odds,\n\t\tdefender_brutal_odds,\n\t\tdefender_brutal_crit_odds\n\t);\n}\n\nconst calculate_normal_odds = (circumstances) => {\n\tconst attacker_odds = generate_attacker_odds(circumstances);\n\tconst defender_odds = generate_defender_odds(circumstances);\n\tconst defender_crit_odds = circumstances.cover ?\n\t\tgenerate_defender_odds(clone(circumstances, {cover: false})) :\n\t\tdefender_odds;\n\treturn combine_odds(\n\t\tattacker_odds,\n\t\tdefender_odds,\n\t\tdefender_crit_odds,\n\t);\n}\n\nconst calculate_odds = (circumstances) => {\n\tif (circumstances.brutal) {\n\t\treturn calculate_brutal_odds(circumstances);\t\n\t} else {\n\t\treturn calculate_normal_odds(circumstances);\n\t}\n}\n\nexport {calculate_odds};\n","import {calculate_odds} from './math/calculate_odds';\n\nonmessage = function(event)  {\n\tconst odds = calculate_odds(event.data.circumstances);\n\tpostMessage({\n\t\trequestTime: event.data.requestTime,\n\t\toutput: odds\n\t});\n}\n"],"names":["clone","obj","arguments","length","undefined","generate_all_rolls","n","baseline","roll","map","new_roll","concat","powers_of_six","normalize_vector","v","denom","Object","values","reduce","x","y","vector_sanity_check","power","Math","abs","is_close","console","error","fromEntries","entries","_ref","key","value","count","arr","el","filter","Boolean","indicesOf","i","generate_attacker_odds","circumstances","outcomes","BRUTAL_CRIT","CRIT","BRUTAL_HIT","HIT","MISS","evaluate_roll","rerolls_used","weight","rapid_fire","reroll_indices","includes","weight_factor","reroll","rerolls","indexOf","get_reroll_possibilities","precise","brutal","reroll_index","get_brutal_reroll_index","one_indices","two_indices","index","forEach","min","outcome","get_attack_outcome","is_brutal","injuries","long_shot","moving","cover","target_running","get_attack_dice","generate_defender_odds","results","COVER","ARMOR","defense_rolls","die_index","scoped_reroll_available","scoped","armor","armor_value","armor_penetration","generate_defender_brutal_odds","die_index_1","die_index_2","next_index","max","saved_one_from_cover","cover_dice","scoped_reroll_index","findIndex","die","every","some","armor_roll","armor_dice","calculate_odds","attacker_odds","defender_odds","defender_crit_odds","defender_brutal_odds","defender_brutal_crit_odds","defense","crit_defense","brutal_defense","crit_brutal_defense","KILL","attack","HIT_AND_ARMOR_BREAK","ARMOR_BREAK","DOUBLE_ARMOR_BREAK","combine_brutal_odds","calculate_brutal_odds","combine_odds","calculate_normal_odds","onmessage","event","odds","data","postMessage","requestTime","output"],"sourceRoot":""}